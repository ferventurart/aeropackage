@using AeroPackage.Contracts.Customer;
@using AeroPackage.Contracts.Sale;
@using AeroPackage.WebApp.Model.Sale;
@using System.Globalization;
@inject ICustomerService _customerService;
@inject IPackageService _packageService;
@attribute [Authorize(Roles = "Admin,Executive")]
@page "/ventas/registrar"
<AuthorizeView>
    <Authorized>
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudGrid Spacing="10">
            <MudItem xs="8" sm="8">
                <MudPaper Class="d-flex flex-column pa-4" Elevation="3">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudAutocomplete T="CustomerResponse"
                                             Label="Servicios"
                                             @bind-Value="_selectedCustomer"
                                             SearchFunc="@SearchCustomerAsync"
                                             AdornmentIcon="@Icons.Material.Filled.Search"
                                             AdornmentColor="Color.Primary"
                                             ShowProgressIndicator="true"
                                             ProgressIndicatorColor="Color.Primary"
                                             ToStringFunc="@(customer => customer == null ? null : $"{customer.FirstName} {customer.LastName}")"
                                             Immediate="true"
                                             Required="true"
                                             CoerceValue="true"
                                             Variant="Variant.Outlined"
                                             RequiredError="Seleccione un servicio del listado"
                                             Placeholder="Servicio a Facturar"
                                             Margin="Margin.Dense" />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
                <MudPaper Class="d-flex flex-column mt-3" Elevation="3" Square="false">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTable Items="@model.Items" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit"
                                      @bind-SelectedItem="selectedItem1" SortLabel="Sort By" CommitEditTooltip="Guardar Cambio"
                                      RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                                      RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="true"
                                      HeaderClass="mud-theme-primary">
                                <HeaderContent>
                                    <MudTh Style="color:white;">Item</MudTh>
                                    <MudTh Style="color:white;">Precio</MudTh>
                                    <MudTh Style="color:white;">Cant.</MudTh>
                                    <MudTh Style="color:white;">Desc.</MudTh>
                                    <MudTh Style="color:white;">Subtotal</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="SaleDetail">
                                    <MudTd DataLabel="Item">@SaleDetail.Description</MudTd>
                                    <MudTd DataLabel="Precio">@SaleDetail.Rate.ToString("C2")</MudTd>
                                    <MudTd DataLabel="Cant.">@SaleDetail.Quantity</MudTd>
                                    <MudTd DataLabel="Cant.">@SaleDetail.Discount.ToString("C2")</MudTd>
                                    <MudTd DataLabel="Subtotal">@SaleDetail.LineTotal.ToString("C2")</MudTd>
                                    <MudTd DataLabel="Borrar"><MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"></MudIconButton></MudTd>
                                </RowTemplate>
                                <RowEditingTemplate Context="SaleDetail">
                                    <MudTd DataLabel="Item">@SaleDetail.Description</MudTd>
                                    <MudTd DataLabel="Precio">@SaleDetail.Rate.ToString("C2")</MudTd>
                                    <MudTd DataLabel="Cant.">
                                        <MudNumericField HideSpinButtons="true" Margin="Margin.Dense" @bind-Value="@SaleDetail.Quantity" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Desc.">
                                        <MudNumericField HideSpinButtons="true" Max="@(SaleDetail.Quantity * SaleDetail.Rate)" Margin="Margin.Dense" @bind-Value="@SaleDetail.Discount" Required />
                                    </MudTd>
                                    <MudTd DataLabel="Subtotal">@SaleDetail.LineTotal.ToString("C2")</MudTd>
                                    <MudTd DataLabel="Borrar"><MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"></MudIconButton></MudTd>
                                </RowEditingTemplate>
                                <EditButtonContent Context="button">
                                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                                </EditButtonContent>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
                <MudPaper Class="d-flex flex-column pa-4 mt-3" Elevation="3" Square="false">
                    <MudItem xs="12">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudAutocomplete T="CustomerResponse"
                                                 Label="Cliente"
                                                 @bind-Value="_selectedCustomer"
                                                 SearchFunc="@SearchCustomerAsync"
                                                 AdornmentIcon="@Icons.Material.Filled.Search"
                                                 AdornmentColor="Color.Primary"
                                                 ShowProgressIndicator="true"
                                                 ProgressIndicatorColor="Color.Primary"
                                                 ToStringFunc="@(customer => customer == null ? null : $"{customer.FirstName} {customer.LastName}")"
                                                 Immediate="true"
                                                 Required="true"
                                                 CoerceValue="true"
                                                 Variant="Variant.Outlined"
                                                 RequiredError="Seleccione un cliente del listado"
                                                 Placeholder="Buscar cliente por nombre"
                                                 Margin="Margin.Dense" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="@model.Terms" Label="Terminos y Condiciones" Lines="3"></MudTextField>
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField @bind-Value="@model.Notes" Label="Notas" Lines="3"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-center">
                                <div class="d-flex">
                                    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Pause" Color="Color.Warning" Class="ml-2">Pausar</MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudPaper>
            </MudItem>
            <MudItem xs="4" sm="4">
                <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
                    <MudList>
                        <MudListItem>
                            <div class="d-flex">
                                <MudText>Subtotal</MudText>
                                <MudText Inline="true" Class="ml-auto" Typo="Typo.h5">@model.Subtotal.ToString("C2")</MudText>
                            </div>
                        </MudListItem>
                        <MudDivider />
                        <MudListItem>
                            <div class="d-flex">
                                <MudText>Descuento</MudText>
                                <MudText Inline="true" Class="ml-auto" Typo="Typo.h5">@model.Discount.ToString("C2")</MudText>
                            </div>
                        </MudListItem>
                        <MudDivider />
                        <MudListItem>
                            <div class="d-flex">
                                <MudNumericField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Success" 
                                 Label="Deposito" Max="@model.AmountDue" Min="0" Margin="Margin.Dense" @bind-Value="@model.Deposit"
                                 HideSpinButtons="true" />
                            </div>
                        </MudListItem>
                    </MudList>
                    <div class="mt-auto">
                        <MudDivider />
                        <div class="d-flex pa-4">
                            <MudText>Total a Pagar:</MudText>
                            <MudText Class="ml-auto"><b>@model.AmountDue.ToString("C2")</b></MudText>
                        </div>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        You are not authorized
    </NotAuthorized>
</AuthorizeView>
@code {
    bool open = false;
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Tablero de Control", href: "/dashboard"),
        new BreadcrumbItem("Ventas", href: null, disabled: true),
        new BreadcrumbItem("Registrar", href: "/ventas/registrar"),
    };
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private InvoiceDto model = new()
    {
        Items = new List<InvoiceDetailDto>()
        {
            new InvoiceDetailDto()
            {
                Id = Guid.NewGuid(),
                Description = "Flete de Importacion",
                Quantity = 1,
                Rate = 12.99m
            },
            new InvoiceDetailDto()
            {
                Id = Guid.NewGuid(),
                Description = "Seguro",
                Quantity = 1,
                Rate = 2.99m
            },
        }
    };
    private InvoiceDetailDto selectedItem1 = null;
    private InvoiceDetailDto elementBeforeEdit;
    private HashSet<InvoiceDetailDto> selectedItems1 = new HashSet<InvoiceDetailDto>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    CustomerResponse _selectedCustomer;


    private async Task<IEnumerable<CustomerResponse>> SearchCustomerAsync(string value) => await _customerService.GetCustomersActiveByName(value);


    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {
            Description = ((InvoiceDetailDto)element).Description,
            Quantity = ((InvoiceDetailDto)element).Quantity,
            Rate = ((InvoiceDetailDto)element).Rate,
            PackageId = ((InvoiceDetailDto)element).PackageId
        };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((InvoiceDetailDto)element).Description = elementBeforeEdit.Description;
        ((InvoiceDetailDto)element).Quantity = elementBeforeEdit.Quantity;
        ((InvoiceDetailDto)element).Rate = elementBeforeEdit.Rate;
        ((InvoiceDetailDto)element).PackageId = elementBeforeEdit.PackageId;
    }

    private void ItemHasBeenCommitted(object element)
    {

    }
}