@using AeroPackage.Contracts.Customer;
@using AeroPackage.Contracts.Service;
@using AeroPackage.Contracts.Sale;
@using AeroPackage.WebApp.Model.Sale;
@using System.Globalization;
@inject ICustomerService _customerService;
@inject ICompanyServicesService _companyServiceService;
@inject IPackageService _packageService;
@attribute [Authorize(Roles = "Admin,Executive")]
@page "/ventas/registrar"
<style>
    .custom-header-class {
        background-color: #594AE2
    }
</style>
<AuthorizeView>
    <Authorized>
        <MudGrid Spacing="2">
            <MudItem sm="7" md="7" lg="7">
                <MudPaper Class="d-flex flex-column pa-4" Elevation="3">
                    <MudGrid Spacing="2" Justify="Justify.SpaceEvenly">
                        <MudItem xs="12">
                            <MudAutocomplete T="ServiceResponse"
                                             Label="Servicios"
                                             @bind-Value="_selectedService"
                                             SearchFunc="@SearchServiceAsync"
                                             AdornmentIcon="@Icons.Material.Filled.Add"
                                             AdornmentColor="Color.Primary"
                                             ShowProgressIndicator="true"
                                             ProgressIndicatorColor="Color.Primary"
                                             ToStringFunc="@(service => service == null ? null : $"{service.Name} - Precio: {service.Rate.ToString("C2")}")"
                                             Required="true"
                                             Variant="Variant.Outlined"
                                             RequiredError="Seleccione un servicio del listado"
                                             Placeholder="Servicio a Facturar"
                                             Margin="Margin.Dense"
                                             MinCharacters="3"
                                             OnAdornmentClick="AddToList" />

                        </MudItem>
                    </MudGrid>
                    <MudGrid Spacing="2" Justify="Justify.SpaceEvenly" Class="mt-3" Style="height:100vh; overflow-y: scroll;">
                        @foreach (var item in Services.Results)
                        {
                            <MudItem>
                                <MudPaper Height="150px" Width="150px" Class="pa-4" Style="@($"color:{Colors.Grey.Darken2}; background:{Colors.Grey.Lighten5}; cursor: pointer;")"
                                          @onclick="(() => AddToList(item))" Elevation="3">
                                    <MudStack Spacing="3" Class="d-flex">
                                        <MudText Align="Align.Left" Typo="Typo.caption" Style="@($"color:{Colors.BlueGrey.Lighten2};")">Servicio</MudText>
                                        <MudText Align="Align.Left" Style="@($"color:{Colors.BlueGrey.Darken2};height: 49px;")" Typo="Typo.button"><b>@item.Name.Trim().Substring(0, (Convert.ToInt32(item.Name.Trim().Length * 0.78m)))</b></MudText>
                                        <MudText Align="Align.Left" Style="@($"color:{Colors.LightBlue.Darken2};")"><b>@item.Rate.ToString("C2")</b></MudText>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                    <div class="d-flex flex-column align-center mt-5">
                        <MudPagination SelectedChanged="PageChanged" BoundaryCount="1" MiddleCount="1" Count="@((Services.TotalRecords + PageSize - 1) / PageSize)" />
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="5" md="5" lg="5">
                <MudPaper Class="d-flex flex-column" Elevation="2">
                    <MudTable T="InvoiceDetailDto"
                              Items="@model.Items"
                              Height="117vh"
                              Striped="true"
                              CustomHeader="true"
                              CustomFooter="true"
                              FixedHeader="true" FixedFooter="true"
                              HeaderClass="custom-header-class">
                        <HeaderContent>
                            <MudTh></MudTh>
                            <MudTh Style="color: white">Item</MudTh>
                            <MudTh Style="color: white">Cant.</MudTh>
                            <MudTh Style="color: white">Precio</MudTh>
                            <MudTh Style="color: white">Subtotal</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="SaleDetail">
                            <MudTd>
                                <MudIconButton Variant="Variant.Text"
                                               Size="Size.Small" Color="Color.Error"
                                               Icon="@Icons.Material.Filled.Delete"
                                               OnClick="(() => RemoveFromList(SaleDetail))" />
                            </MudTd>
                            <MudTd DataLabel="Item">@SaleDetail.Description</MudTd>
                            <MudTd DataLabel="Cant.">@SaleDetail.Quantity</MudTd>
                            <MudTd DataLabel="Precio">@SaleDetail.Rate.ToString("C2")</MudTd>
                            <MudTd DataLabel="Subtotal">@SaleDetail.LineTotal.ToString("C2")</MudTd>
                        </RowTemplate>
                        <FooterContent>
                            <MudTFootRow IsCheckable="true">
                                <MudTd colspan="4"><MudText Typo="Typo.subtitle1">Subtotal</MudText></MudTd>
                                <MudTd><MudText Typo="Typo.h5">@model.Subtotal.ToString("C2")</MudText></MudTd>
                            </MudTFootRow>
                            <MudTFootRow IsCheckable="true">
                                <MudTd colspan="4"><MudText Typo="Typo.subtitle1">Descuento</MudText></MudTd>
                                <MudTd><MudText Typo="Typo.h5">@model.Discount.ToString("C2")</MudText></MudTd>
                            </MudTFootRow>
                            <MudTFootRow IsCheckable="true">
                                <MudTd colspan="4"><MudText Typo="Typo.subtitle1">Total</MudText></MudTd>
                                <MudTd><MudText Typo="Typo.h5">@model.AmountDue.ToString("C2")</MudText></MudTd>
                            </MudTFootRow>
                        </FooterContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        You are not authorized
    </NotAuthorized>
</AuthorizeView>
@code {
    bool open = false;
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
{
        new BreadcrumbItem("Tablero de Control", href: "/dashboard"),
        new BreadcrumbItem("Ventas", href: null, disabled: true),
        new BreadcrumbItem("Registrar", href: "/ventas/registrar"),
    };
    [Inject] ISnackbar Snackbar { get; set; }

    ServiceResponse _selectedService = null;
    private InvoiceDto model = new();
    private PaginatedResult<ServiceResponse> Services = new PaginatedResult<ServiceResponse>
    {
        PageNumber = 1,
        PageSize = 30,
        Results = new(),
        TotalRecords = 0
    };

    private int PageNumber = 1;
    private int PageSize = 30;
    private int PageSelected = 1;
    //private async Task<IEnumerable<CustomerResponse>> SearchCustomerAsync(string value) => await _customerService.GetCustomersActiveByName(value);
    private async Task<IEnumerable<ServiceResponse>> SearchServiceAsync(string value) => await _companyServiceService.GetServicesActiveByName(value);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Services = await _companyServiceService.GetAllServices(PageSize, PageNumber, 1);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Ocurrio un error al recuperar la informacion del cliente.", MudBlazor.Severity.Error);
        }
    }


    private async Task PageChanged(int i) => Services = await _companyServiceService.GetAllServices(PageSize, i, 1);


    private void AddToList()
    {
        var line = new InvoiceDetailDto()
        {
            Id = Guid.Parse(_selectedService.Id),
            Description = _selectedService.Name,
            Quantity = 1,
            Rate = _selectedService.Rate
        };

        if (model.Items.Count > 0 && model.Items.Any(s => s.Id == line.Id))
        {
            model.Items
              .Where(w => w.Id == line.Id)
              .ToList()
              .ForEach(i => i.Quantity++);
        }
        else
        {
            model.Items.Add(line);
        }

        _selectedService = null;
    }

    private void AddToList(ServiceResponse item)
    {
        var line = new InvoiceDetailDto()
        {
            Id = Guid.Parse(item.Id),
            Description = item.Name,
            Quantity = 1,
            Rate = item.Rate
        };

        if (model.Items.Count > 0 && model.Items.Any(s => s.Id == line.Id))
        {
            model.Items
              .Where(w => w.Id == line.Id)
              .ToList()
              .ForEach(i => i.Quantity++);
        }
        else
        {
            model.Items.Add(line);
        }

        _selectedService = null;
    }

    private void RemoveFromList(InvoiceDetailDto line) => model.Items.Remove(line);

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Snackbar.Add("QUE VIVA EL SEXO", Severity.Info);
        }
        else
        {
            //
        }
    }
}