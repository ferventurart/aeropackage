@page "/paquetes/buscar"
@using AeroPackage.WebApp.Model
@using AeroPackage.Contracts.Package;
@using AeroPackage.WebApp.Providers;
@using AeroPackage.WebApp.Extensions;
@using System.Globalization;
@using AeroPackage.WebApp.Components.Package;
@inject IPackageService _packageService
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin,Executive,Warehouse")]

<AuthorizeView>
    <Authorized>
        <MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>
        <MudExpansionPanels>
            <MudExpansionPanel>
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.FilterAlt" class="mr-3"></MudIcon>
                        <MudText>Filtra tus <strong>Paquetes</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudDateRangePicker @ref="_picker"
                                                @bind-DateRange="_dateRange"
                                                Label="Filtrar por Fechas"
                                                HelperText="Seleccione un periodo de tiempo"
                                                DateFormat="dd/MM/yyyy"
                                                TitleDateFormat="dddd, dd. MMMM"
                                                Culture="@CultureInfo.GetCultureInfo("es-ES")">
                            </MudDateRangePicker>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <SelectCommonPackageStatus StatusSelected="StatusSelectedCallback"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MultiSelectCommonStores StoresSelected="StoresSelectedCallback" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton OnClick="OnFilterPackages"
                                       Variant="Variant.Filled"
                                       EndIcon="@Icons.Material.Filled.Search"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       style="float: right;"
                                       Disabled="@disabledFilterButton">Filtrar</MudButton>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
        <MudCard Class="mt-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Listado de Paquetes</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Href="/paquetes/registrar"
                               Class="mt-2"
                               Color="Color.Primary" Variant="Variant.Filled"
                               Size="Size.Small"
                               EndIcon="@Icons.Material.Filled.DocumentScanner">Registrar</MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudTable @ref="@_table"
                      Dense="true"
                      Hover="true"
                      Bordered="true"
                      Striped="true"
                      LoadingProgressColor="Color.Primary"
                      ServerData="@(new Func<TableState, Task<TableData<PackageResponse>>>(ServerReload))"
                      @bind-SelectedItem="_selectedPackage"
                      Breakpoint="Breakpoint.Sm"
                      Class="mt-10">
                <ToolBarContent>
                    <MudTextField Style="width: fit-content" Margin="Margin.Dense" Variant="Variant.Outlined" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Buscar" Den Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" Clearable="true" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>AeroShopTrack</MudTh>
                    <MudTh><MudTableSortLabel SortLabel="consignee" T="PackageResponse">Consignatario</MudTableSortLabel></MudTh>
                    <MudTh>Tienda</MudTh>
                    <MudTh>Descripcion</MudTh>
                    <MudTh>Peso (Lbs)</MudTh>
                    <MudTh>Monto Compra</MudTh>
                </HeaderContent>
                <RowTemplate Context="package">
                    <MudTd DataLabel="AeroShopTrack"><MudLink Target="_blank" Href="@($"/paquetes/ver/{package.OwnTrackingNumber}")">@package.OwnTrackingNumber</MudLink></MudTd>
                    <MudTd DataLabel="Consignatario">@package.Consignee</MudTd>
                    <MudTd DataLabel="Tienda Oriden">@package.Store</MudTd>
                    <MudTd DataLabel="Descripcion">@package.Description</MudTd>
                    <MudTd DataLabel="Peso (Lbs)">@package.Weight</MudTd>
                    <MudTd DataLabel="Monto Compra">@package.DeclaredValue.ToString("C", CultureInfo.CurrentCulture)</MudTd>
                </RowTemplate>
                <LoadingContent>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </LoadingContent>
                <NoRecordsContent>
                    <MudAlert Class="pt-2 align-center" Icon="@Icons.Material.Filled.TableView" Severity="Severity.Normal">No hay registros para mostrar.</MudAlert>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudCard>

    </Authorized>
    <NotAuthorized>
        You are not authorized
    </NotAuthorized>
</AuthorizeView>
@code {

    [Inject] ISnackbar Snackbar { get; set; }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Tablero de Control", href: "/dashboard"),
        new BreadcrumbItem("Paquetes", href: "/paquetes/buscar"),
        new BreadcrumbItem("Buscar", href: "/paquetes/buscar"),
    };

    private MudDateRangePicker _picker;
    private MudTable<PackageResponse> _table;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private string _searchCriteria = string.Empty;
    private PackageResponse _selectedPackage = null;
    private PaginatedResult<PackageResponse> _packages = new();
    private string _packageStatus = "PreAlert";
    public string _packageStore { get; set; } = "Amazon";
    private bool disabledFilterButton = false;

    private async Task<TableData<PackageResponse>> ServerReload(TableState state)
    {

        try
        {
            var paginatedResult = await _packageService.GetPackagesByPeriodStatusAndStore(_dateRange.Start.Value, _dateRange.End.Value, _packageStatus, _packageStore, state.PageSize, state.Page == 0 ? 1 : state.Page); ;

            if (paginatedResult.Results is not null)
            {
                IEnumerable<PackageResponse> data = paginatedResult.Results;

                await Task.Delay(300);

                data = data.Where(element =>
                {
                    if (string.IsNullOrWhiteSpace(_searchCriteria))
                        return true;
                    if (element.Consignee.ToLower().Contains(_searchCriteria.ToLower()))
                        return true;
                    return false;
                }).ToArray();

                switch (state.SortLabel)
                {
                    case "full_name":
                        data = data.OrderByDirection(state.SortDirection, o => o.Consignee.ToLowerInvariant());
                        break;
                }

                return new TableData<PackageResponse>() { TotalItems = paginatedResult.TotalRecords, Items = data };
            }
            else
            {
                return new TableData<PackageResponse>() { Items = null, TotalItems = 0 };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Snackbar.Add("Ocurrio un error intentando recuperar la informacion.", MudBlazor.Severity.Error);
            return new TableData<PackageResponse>() { Items = null, TotalItems = 0 };
        }
    }

    private void OnSearch(string text)
    {
        _searchCriteria = text;
        _table.ReloadServerData();
    }

    private void OnFilterPackages() => _table.ReloadServerData();

    private void StoresSelectedCallback(List<string> stores)
    {
        if (stores.Count > 5)
        {
            disabledFilterButton = true;
        }
        else
        {
            disabledFilterButton = false;
            _packageStore = string.Join(",", stores);
        }
    }

    private void StatusSelectedCallback(string status)
    {
        Console.WriteLine(status);
        _packageStatus = status;
    }

}

